/*
    Company Tags  : Microsoft, Amazon
    Leetcode Link : https://leetcode.com/problems/partition-to-k-equal-sum-subsets/
*/

class Solution {
public:
    bool solve(vector<int>& nums, vector<int>& subsetSum, vector<bool>& visited, int& sum, int k, int subsetSum_index, int nums_index) {

        if(subsetSum[subsetSum_index] == sum) {
            //I have found that subsetSum which is of size k has been filled till index k-2, so the last subset need not be checked because it will definitely contain "sum" (since, sum%k == 0)
            if(subsetSum_index == k-2)
                return true;
            return solve(nums, subsetSum, visited, sum, k, subsetSum_index+1, nums.size()-1); //fill next subset
        }
        
        for(int i = nums_index; i>=0; i--) {
            if(!visited[i] && nums[i]+subsetSum[subsetSum_index] <= sum) {
                visited[i] = true;
                subsetSum[subsetSum_index] += nums[i];
                if(solve(nums, subsetSum, visited, sum, k, subsetSum_index, i-1))
                    return true;
                visited[i] = false;
                subsetSum[subsetSum_index] -= nums[i];
            }
        }
        return false;
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = 0;
        int n = nums.size();
        if(k == 1)
            return true;
        for(const int& x:nums)
            sum += x;
        
        if(k > n || sum%k != 0)
            return false;
        
        sum = sum/k;
        vector<bool> visited(n, false);
        vector<int> subsetSum(k, 0);
        subsetSum[0] = nums[n-1];
        visited[n-1] = true;
        int subsetSum_index = 0;
        int nums_index      = n-1;
        return solve(nums, subsetSum, visited, sum, k, subsetSum_index, nums_index);
    }
};
