/*
    Company Tags  : Google (with variation)
    Leetcode Link : https://leetcode.com/problems/find-k-closest-elements/
*/
/*
    Note : This could be solved in O(nlog(n)) with sorting or using priority_queue
           This approach below is using Binary Search
*/
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int n            = arr.size();
        
        //since, lower_bound returns the iterator value of element equal to just greater than x
        vector<int>::iterator it = lower_bound(begin(arr), end(arr), x);
        
        //if there was no element greater than, then we just return last k elements
        if(it == end(arr)) {
            vector<int> result(arr.begin()+n-k, arr.end());
            return result;
        }
        
        int l;
        l = it - arr.begin();
        if(arr[l] > x)
            l--;
        int r = l+1;
        while(k--) {
            if(r >= n || (l >= 0 && abs(arr[l]-x) <= abs(arr[r]-x)))
                l--;
            else
                r++;
        }
        
        vector<int> result(arr.begin()+l+1, arr.begin()+r);
        
        return result;
    }
};
