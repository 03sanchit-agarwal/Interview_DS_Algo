/*
    Company Tags  :  Google
    Leetcode Link : https://leetcode.com/problems/perfect-squares/
    This question is nothing but just similar to of "Minimum Coins to get sum S (COIN CHANGE - Leetcode : 322"
*/

//Approach-1 (Recusrion + Memoization)
class Solution {
public:
    int minCoinsToGetS(vector<int>& coins, int n, int S, vector<vector<int>>& t) {
        if(t[n][S] != -1)
            return t[n][S];
        
        if(n == 0)
            return INT_MAX-1;
        if(S == 0)
            return 0;
        if(n == 1) {
            if(S % coins[0] == 0)
                return t[n][S] = S/coins[0];
            else
                return t[n][S] = INT_MAX-1;
        }
        
        if(coins[n-1] <= S) {
            return t[n][S] = min(1 + minCoinsToGetS(coins, n, S-coins[n-1], t), minCoinsToGetS(coins, n-1, S, t));
        } else
            return t[n][S] = minCoinsToGetS(coins, n-1, S, t);
    }
    int numSquares(int S) {
        vector<int> coins;
        for(int i = 1; i*i<=S; i++) {
            coins.push_back(i*i);
        }
        int n = coins.size();
        
        vector<vector<int>> t(n+1, vector<int>(S+1, -1));
        return minCoinsToGetS(coins, n, S, t);
    }
};

//Approach-2 (Bottom Up DP)
class Solution {
public:
    int minSquares(vector<int> squares, int n, int S) {        
        vector<vector<int>> t(n+1, vector<int>(S+1));
        for(int j = 0; j<S+1; j++) {
            t[0][j] = INT_MAX-1;
        }
        
        for(int i = 1; i<n+1; i++) {
            t[i][0] = 0;
        }
        
        for(int j = 1; j<S+1; j++) {
            if(j % squares[0] == 0)
                t[1][j] = j/squares[0];
            else
                t[1][j] = INT_MAX-1;
        }
        
        for(int i = 2; i<n+1; i++) {
            for(int j = 1; j<S+1; j++) {
                if(squares[i-1] <= j)
                    t[i][j] = min(1+t[i][j-squares[i-1]], t[i-1][j]);
                else
                    t[i][j] = t[i-1][j];
            }
        }
        return t[n][S];
    }
    int numSquares(int S) {
        if(S == 0 || S == 1)
            return S;
        vector<int> squares;
        for(int i = 1; i*i<=S; i++) {
            squares.push_back(i*i);
        }
        int n = squares.size();
        return minSquares(squares, n, S);
    }
};
