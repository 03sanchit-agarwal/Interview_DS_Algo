/*
  Company Tags     : Paytm, Amazon, Microsoft, Samsung, Snapdeal, Citrix, D-E-Shaw, Ola Cabs, Visa, Linkedin, Opera, Streamoid Technologies, Informatica
  Leetcode Qn Link : https://leetcode.com/problems/number-of-islands/
*/

class Solution {
public:
    vector<pair<int, int>> directions{ {-1, 0}, {1, 0}, {0, 1}, {0, -1} };
    int numIslands(vector<vector<char>>& grid) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        if(grid.size() == 0)
            return 0;
        
        int islands = 0;
        
        int row = grid.size();
        int col = grid[0].size();
        vector<vector<bool>> visited(row, vector<bool>(col));
        auto isSafe = [&](int x, int y) {
            return x >= 0 && x < row && y >= 0 && y < col;
        };
        for(int i = 0; i<row; i++) {
            for(int j = 0; j<col; j++) {
                if(!visited[i][j] && grid[i][j] == '1') {
                    islands++;
                    queue<pair<int, int>> que;
                    que.push({i,j});
                    visited[i][j] = true;
                    while(!que.empty()) {
                        pair<int, int> p = que.front();
                        que.pop();
                        for(pair<int, int> dir:directions) {
                            int x = p.first  + dir.first;
                            int y = p.second + dir.second;
                            if(isSafe(x, y) && grid[x][y] == '1' && !visited[x][y]) {
                                que.push({x, y});
                                visited[i][j] = true;
                            }
                        }
                    }
                }
            }
        }
        return islands;
    }
};
